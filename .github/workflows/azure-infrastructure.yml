name: Deploy Azure Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  actions: write

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Purge soft-deleted Key Vaults
        continue-on-error: true
        run: |
          echo "Checking for soft-deleted Key Vaults matching pattern: kv-song-${{ inputs.environment }}-*"

          # List all soft-deleted Key Vaults
          DELETED_VAULTS=$(az keyvault list-deleted --query "[?starts_with(name, 'kv-song-${{ inputs.environment }}-')].{name:name, location:properties.location}" -o json)

          if [ "$DELETED_VAULTS" != "[]" ]; then
            echo "Found soft-deleted Key Vaults to purge:"
            echo "$DELETED_VAULTS" | jq -r '.[] | "  - \(.name) in \(.location)"'

            # Purge each soft-deleted Key Vault
            echo "$DELETED_VAULTS" | jq -r '.[] | "\(.name) \(.location)"' | while read name location; do
              echo "Purging Key Vault: $name in $location"
              az keyvault purge --name "$name" --location "$location" --no-wait
            done

            echo "Key Vault purge initiated (may take a few moments to complete)"
            sleep 10
          else
            echo "No soft-deleted Key Vaults found"
          fi

      - name: Deploy Bicep template
        uses: azure/arm-deploy@v2
        id: deploy
        with:
          scope: resourcegroup
          resourceGroupName: rg-songster-${{ inputs.environment }}
          template: ./infrastructure/bicep/main.bicep
          parameters: ./infrastructure/bicep/parameters/${{ inputs.environment }}.parameters.json
          deploymentName: songster-${{ inputs.environment }}-${{ github.run_number }}
          failOnStdErr: false

      - name: Configure Static Web App deployment token
        run: |
          echo "Retrieving Static Web App deployment token..."
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list \
            --name ${{ steps.deploy.outputs.staticWebAppName }} \
            --query "properties.apiKey" \
            -o tsv)

          echo "Setting GitHub secret AZURE_STATIC_WEB_APP_API_TOKEN..."
          gh secret set AZURE_STATIC_WEB_APP_API_TOKEN --body "$DEPLOYMENT_TOKEN"

          echo "✓ Deployment token configured successfully"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display deployment outputs
        run: |
          echo "### Deployment Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend API:**" >> $GITHUB_STEP_SUMMARY
          echo "- Name: ${{ steps.deploy.outputs.appServiceName }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.deploy.outputs.appServiceUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend:**" >> $GITHUB_STEP_SUMMARY
          echo "- Name: ${{ steps.deploy.outputs.staticWebAppName }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.deploy.outputs.staticWebAppUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Key Vault:**" >> $GITHUB_STEP_SUMMARY
          echo "- Name: ${{ steps.deploy.outputs.keyVaultName }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Secrets:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✓ AZURE_STATIC_WEB_APP_API_TOKEN configured" >> $GITHUB_STEP_SUMMARY
